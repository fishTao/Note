UI
UIWindows 即为窗口，手机屏幕的大小，所以UIWindow大小是固定几个的（但是手机屏幕也可能多窗口），把uivew放在其上显示。可在window上加入各种控件
UIWindow 继承自UIView

程序开发入口： main（）
每个程序都是 UIAplication对象，UIAplication只放置相同的东西（事件监听，事件循环（RunLoop）），不同的交给委托来实现（逻辑，界面（UI）（UIWindow是委托对象的属性，把视图交给window实现）），
UIWindow用视图控制器 进行视图切换，一个视图就有一个视图控制器进行控制，RootVC（window自带属性），rootvc即为导航控制器，控制视图控制器，进栈出栈，这样的话，交互特别灵活，用户一级体验太少，因此   交互特点特别固定

Xib 与 Nib 相同  只是名字不同     IB  与试图控制器有关，
storyborde   SB       一个界面到下一个界面的切换，最终呈现的为一个文件，多人开发容易冲突，

didFinishLaunch  时已经加载完了storyboard,即创建完了UIWindow 

UIApplicationMain（）  创建window，rootvc ，  application，appdelegate

[ UIScreen mainScreen ] .bounds  //  电脑屏幕也有个类

苹果iOS是由苹果公司开发的移动操作系统。苹果公司最早于2007年1月9日的Macworld大会上公布这个系统，
         
开发iOS应用程序特点
    只用一个应用程序正在运行
    只有一个窗口(Window)(目前已有多窗口功能)
    受限访问：沙盒机制严格限制了应用程序的访问权限；较小网络端口；root权限；
    有限的响应时间
    有限的屏幕大小
    有限的系统资源：内存空间 >=20MB告警 >=30MB关闭应用程序；存储空间<=2GB；     不支持GC
                             
沙盒机制（sandbox)
   iOS中的沙盒机制（SandBox）是一种安全体系，它规定了应用程序只能在为该应用创建的文件夹内读取文件，不可以访问其他地方的内容。所有的非代码文件都保存在这个地方，比如图片、声音、属性列表和文本文件等。
   每个应用程序都在自己的沙盒内
   不能随意跨越自己的沙盒去访问别的应用程序沙盒的内容
   应用程序向外请求或接收数据都需要经过权限认证

                             
什么是应用程序的生命周期
    应用程序生命周期指的是应用程序从启动到应用程序结束整个阶段的全部过程。
    每一个iOS应用程序都包含一个UIApplication对象
    每一个iOS应用程序都要为其UIApplication对象设置一个代理对象，并由该代理对象处理UIApplication对象监测到的应用程序生命周期的事件


 // iOS加载app将要结束时并且app程序差不多已准备好运行的时候会调用这个方法。通常我们需要使用这个方法来完成app的初始化和最后设置的一些微调。这个方法调用发生在app的window和UI展现之前。
     - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions

// 当应用程序将要入非活动状态执行，在此期间，应用程序不接收消息或事件，比如来电话了、锁屏。通常在这个方法里实现：停止timer和其他周期性的任务、停止任何正在运行的请求、暂停视频的播放、如果是游戏那就暂停它、减少OpenGL ES的帧率、挂起任何分发的队列和不重要的操作队列（你可以继续处理网络请求或其他时间敏感的后台任务）。
     - (void)applicationWillResignActive:(UIApplication *)application

//  当应用程序入活动状态执行，这个刚好跟上面那个方法相反，需要实现任务重新开始，比如重新开始timer, 继续分发队列，提高OpenGL ES的帧率。不过游戏要回到暂停状态，不能自动开始。
     - (void)applicationDidBecomeActive:(UIApplication *)application

// 当程序被推送到后台的时候调用。所以要设置后台继续运行，则在这个函数里面设置即可。在这个方法里需要实现：保存用户数据或状态信息，所有没写到磁盘的文件或信息，在进入后台时，最后都写到磁盘去，因为程序可能在后台被杀死，释放尽可能释放的内存
    - (void)applicationDidEnterBackground:(UIApplication *)application

 // 当程序从后台将要重新回到前台时候调用，这个刚好跟上面的那个方法相反。
    - (void)applicationWillEnterForeground:(UIApplication *)application

 // 当程序将要退出是被调用，通常是用来保存数据和一些退出前的清理工作。这个需要要设置UIApplicationExitsOnSuspend的键值。
     - (void)applicationWillTerminate:(UIApplication *)application




info.plist 中写有soryboread的名字  控制UIWindow的属性 即 rootVC


main函数是程序启动的入口，在iOS app中，main函数的功能被最小化，它的主要工作都交给了UIKit framework。

UIApplicationMain函数有四个参数，你不需要改变这些参数值，不过我们也需要理解这些参数和程序是如何开始：argc 和argv参数包含了系统带过来的启动时间。  第三个参数确定了主要应用程序类的名称，这个参数指定为nil，这样UIKit就会使用默认UIApplication类创建对象。第四个参数是程序自定义的代理类名，这个类负责系统和代码之间的交互。它一般在Xcode新建项目时会自动生成。
    另外 UIApplicationMain函数加载了程序主界面的文件。虽然这个函数加载了界面文件，但是没有放到应用程序的windows上。
    重点理解，UIApplicationMain做的三件事：1､根据第三个参数创建UIApplication对象 2、根据第个参数创建应用程序的delegate，并设置delegate 3、设置主事件循环(main event loop)包括application的run loop,同时开始处理事件。

Main Run Loop负责处理用户相关的事件。UIApplication对象在程序启动时启动main run Loop，它处理事件和更新视图的界面。看Main Run Loop就知道，它是运行在程序的主线程上的。这样保证了接收到用户相关操作的事件是按顺序处理的。

     用户操作设备，相关的操作事件被系统生成并通过UIKit的指定端口分发。事件在内部排成队列，一个个的分发到Main run loop 去做处理。UIApplication对象是第一个接收到时间的对象，它决定事件如何被处理。触摸事件分发到主窗口，窗口再分发到对应出发触摸事件的View。其他的事件通过其他途径分发给其他对象变量做处理。
     大部分的事件可以在你的应用里分发，类似于触摸事件，远程操控事件（线控耳机等）都是由app的 responder objects 对象处理的。Responder objects 在你的app里到处都是，比如：UIApplication 对象。view对象，view controller 对象，都是resopnder objects。大部分事件的目标都指定了resopnder object，不过事件也可以传递给其他对象。比如，如果view对象不处理事件，可以传给父类view或者view controller。



//  在进行此方法时，UIWindow已经加载了，可以在这方法中对UIWindow进行更换
    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {

     //    NSLog(@"%@", self.window);

        CGRect rect = [UIScreen mainScreen].bounds;
        UIWindow *window = [[UIWindow alloc] initWithFrame:rect];
        window.backgroundColor = [UIColor grayColor];
        self.window = window;

// 在UIWindow上加一个view显示，，所以显示控件是不一定需要self.view ，self.view是懒加载的 
        UIView *view = [[UIView alloc] initWithFrame:CGRectMake(100, 100, 200, 200)];
        view.backgroundColor = [UIColor redColor];
        view.layer.cornerRadius = 15;
        [window addSubview:view];

         return YES;
     }



